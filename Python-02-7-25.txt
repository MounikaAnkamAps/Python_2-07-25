1-->Delete a list of keys from a dictionary
sample_dict = {"name": "Kelly","age": 25, "salary": 8000, "city": "New york"}
keys = ["name", "salary"]
for i in keys:
    if i in sample_dict:
        del sample_dict[i]
print(sample_dict)

2-->Count the frequency of each character in a given string using a dictionary.
s="mounikaa"
res={}
c=0
for i in s:
    if i not in res:
        res[i]=1 
    elif i in res:
        res[i]+=1
print(res)

3-->Write a Python program to create a dictionary with two keys:
"even" → containing all even numbers from the list
"odd" → containing all odd numbers from the list
Expected Output:
{'even': [0, 2, 4, 6, 8], 'odd': [1, 3, 5, 7, 9]}
res = {'even': [], 'odd': []}
for i in range(1,10):
    if i%2==0:
        res["even"].append(i)
    else:
        res["odd"].append(i)
print(res)

4-->What is the difference between dict.get() and direct key access?
In Python, both dict.get(key) and dict[key] are used to access values from a dictionary using a key. However, the main difference lies in how they handle missing keys. When you use dict[key], Python will return the value if the key exists. But if the key does not exist, it raises a KeyError and may cause the program to crash unless handled using try-except.
On the other hand, dict.get(key) is a safer method. If the key is present, it returns the corresponding value. If the key is not present, it returns None by default without raising any error. You can also specify a custom default value, like dict.get(key, default_value), which will be returned if the key doesn't exist. This makes get() especially useful when you’re not sure if the key is in the dictionary and want to avoid runtime errors.

5-->Convert a dictionary to a list of tuples.
d = {'a': 1, 'b': 2, 'c': 3}
tuple_list = list(d.items())
print(tuple_list)

6-->Write a program to store names as keys and their lengths as values.

names = ["Mounika", "Ravi", "Sita", "Krishna"]
name_lengths = {name: len(name) for name in names}
print(name_lengths)


7-->Create a dictionary for numbers 1 to 5, where the value is "even" if the number is even, and "odd" if the number is odd
{1: 'odd', 2: 'even', 3: 'odd', 4: 'even', 5: 'odd'}

result = {i: "even" if i % 2 == 0 else "odd" for i in range(1, 6)}
print(result)

8-->Create Reverse Word Dictionary
Given list of words:

words = ['cat', 'dog', 'bat']
reverse_dict = {word: word[::-1] for word in words}
print(reverse_dict)

 
9-->Write a program to sum all the values in a dictionary.
data = {'a': 10, 'b': 20, 'c': 30}
total = 0
for value in data.values():
    total += value
print("Sum of values:", total)